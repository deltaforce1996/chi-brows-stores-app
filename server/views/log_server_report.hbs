<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Log Viewer with JSON Viewer</title>
    <script src="https://cdn.tailwindcss.com"></script>
</head>

<body class="bg-gray-900 text-white p-6 font-mono">
    <div class="max-w-5xl mx-auto">
        <h1 class="text-3xl font-bold mb-4">Log Viewer</h1>

        <div class="flex space-x-2 mb-4">
            <input id="log-date" type="date" class="bg-gray-800 p-2 rounded text-white" />
            <button onclick="fetchLogs()" class="bg-blue-600 hover:bg-blue-700 px-4 py-2 rounded">
                Load Logs
            </button>
        </div>

        <div id="log-output" class="space-y-4">
            <p>Select a date and click "Load Logs"</p>
        </div>
    </div>

    <script>
        function getStatusColor(status) {
            if (status >= 500) return 'text-red-400';
            if (status >= 400) return 'text-yellow-400';
            if (status >= 200) return 'text-green-400';
            return 'text-white';
        }

        function formatTimestamp(isoString) {
            const date = new Date(isoString);
            const pad = (n, w = 2) => String(n).padStart(w, '0');
            return `${date.getFullYear()}-${pad(date.getMonth() + 1)}-${pad(date.getDate())} ` +
                `${pad(date.getHours())}:${pad(date.getMinutes())}:${pad(date.getSeconds())}:${pad(date.getMilliseconds(), 3)}`;
        }

        function renderJsonViewer(obj, depth = 0) {
            const container = document.createElement('div');
            container.className = 'text-sm pl-3 border-l border-gray-700';

            const keys = Object.keys(obj);
            if (keys.length === 0) {
                const emptyMsg = document.createElement('div');
                emptyMsg.className = 'italic text-gray-400';
                emptyMsg.textContent = '{} (empty)';
                container.appendChild(emptyMsg);
                return container;
            }

            keys.forEach(key => {
                const value = obj[key];
                const entry = document.createElement('div');
                entry.className = 'mb-1';

                if (typeof value === 'object' && value !== null) {
                    const summary = document.createElement('div');
                    summary.className = 'cursor-pointer text-blue-300 hover:underline';
                    const isArray = Array.isArray(value);
                    summary.textContent = `${key}: ${isArray ? '[…]' : '{…}'}`;

                    const nested = renderJsonViewer(value, depth + 1);
                    nested.style.display = 'none';

                    summary.addEventListener('click', () => {
                        nested.style.display = nested.style.display === 'none' ? 'block' : 'none';
                    });

                    entry.appendChild(summary);
                    entry.appendChild(nested);
                } else {
                    let displayValue = JSON.stringify(value);
                    let fullValue = displayValue;
                    let isLong = false;

                    if (typeof value === 'string' && value.length > 100) {
                        displayValue = JSON.stringify(value.slice(0, 100) + '...') + ' ';
                        isLong = true;
                    }

                    const keySpan = `<span class="text-green-400">${key}</span>: `;
                    const valueSpan = document.createElement('span');
                    valueSpan.className = 'text-yellow-300';
                    valueSpan.textContent = displayValue;

                    if (isLong) {
                        valueSpan.classList.add('cursor-pointer', 'hover:underline');
                        valueSpan.title = 'Click to expand';

                        valueSpan.addEventListener('click', () => {
                            const isExpanded = valueSpan.textContent === fullValue;
                            valueSpan.textContent = isExpanded ? displayValue : fullValue;
                        });
                    }

                    entry.innerHTML = keySpan;
                    entry.appendChild(valueSpan);
                }

                container.appendChild(entry);
            });

            return container;
        }

        async function fetchLogs() {
            const date = document.getElementById('log-date').value;
            const container = document.getElementById('log-output');
            container.innerHTML = '<p class="text-gray-400">Loading...</p>';

            try {
                const res = await fetch(`/logs/api?date=${date}`);
                const data = await res.json();

                if (!data.log || data.log === 'No logs for this date.') {
                    container.innerHTML = '<p class="text-gray-400">No logs found.</p>';
                    return;
                }

                const entries = data.log.trim().split('\n\n').filter(e => e.trim());

                // Extract and sort by timestamp (descending)
                const parsedEntries = entries.map(entry => {
                    const lines = entry.trim().split('\n');
                    const jsonText = lines.slice(1).join('\n');
                    let timestamp = 0;

                    try {
                        const parsed = JSON.parse(jsonText);
                        timestamp = new Date(parsed.timestamp || 0).getTime();
                    } catch (e) {
                        timestamp = 0;
                    }

                    return { entry, timestamp };
                });

                parsedEntries.sort((a, b) => b.timestamp - a.timestamp); // latest → oldest

                container.innerHTML = '';

                parsedEntries.forEach(({ entry }) => {
                    const lines = entry.trim().split('\n');
                    const headerRaw = lines[0];
                    const jsonText = lines.slice(1).join('\n');

                    let parsed = {};
                    let status = 0;
                    let formattedTime = headerRaw;

                    try {
                        parsed = JSON.parse(jsonText);
                        status = parsed.statusCode || 0;
                        formattedTime = formatTimestamp(parsed.timestamp || headerRaw);
                    } catch (err) {
                        // fallback
                    }

                    const statusClass = getStatusColor(status);

                    const block = document.createElement('div');
                    block.className = `border border-gray-700 rounded p-4 bg-black`;

                    const header = document.createElement('div');
                    header.className = `mb-2 font-bold ${statusClass}`;
                    header.textContent = `${formattedTime} — ${parsed.method || ''} ${parsed.url || ''} (${status})`;

                    block.appendChild(header);
                    block.appendChild(renderJsonViewer(parsed));

                    container.appendChild(block);
                });
            } catch (err) {
                container.innerHTML = '<p class="text-red-400">Failed to load logs.</p>';
            }
        }

    </script>
</body>

</html>